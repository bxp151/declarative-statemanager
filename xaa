// file: main.dart
import 'package:flutter/material.dart';
import 'package:demo/managers/dispatch_manager.dart';
import 'package:demo/managers/state_manager.dart';
import 'package:demo/services/database_table_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await DatabaseTableService().database;
  runApp(const MyApp());
}

// Entry point widget
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      initialRoute: '/demo',
      routes: {
        '/demo': (context) => const DemoScaffold(),
      },
    );
  }
}

// Demo scaffold with switches and boxes
class DemoScaffold extends StatefulWidget {
  const DemoScaffold({super.key});

  @override
  State<DemoScaffold> createState() => _DemoScaffoldState();
}

class _DemoScaffoldState extends State<DemoScaffold> {
  // Create the GlobalKeys for each widget state. This allows direct
  // access to a specific widget's internal state for later updates.
  final GlobalKey<BoxWidgetState> boxAkey = GlobalKey<BoxWidgetState>();
  final GlobalKey<BoxWidgetState> boxBkey = GlobalKey<BoxWidgetState>();

  // In _runPostFrameAsync(), call updateWidgetPostFrame() to log the widget
  // completion time and the rebuild result. This confirms the widget has
  // rebuilt and logs what the output looks like.
  Future<void> _runPostFrameAsync() async {
    if (stateLogIDswitchA != null) {
      final appliedColor = boxAkey.currentState?._boxColor.toString();
      await StateManager().updateWidgetPostFrame(
        stateLogID: stateLogIDswitchA!,
        widgetRebuildResult: appliedColor!,
      );
    }
    if (stateLogIDswitchB != null) {
      final appliedColor = boxBkey.currentState?._boxColor.toString();
      await StateManager().updateWidgetPostFrame(
        stateLogID: stateLogIDswitchB!,
        widgetRebuildResult: appliedColor!,
      );
    }
  }

  @override
  void initState() {
    super.initState();
    // Register GlobalKeys with DispatchManager allowing external access
    // to the widget
    DispatchManager().registerBoxAkey(boxAkey);
    DispatchManager().registerBoxBkey(boxBkey);

    // This runs after the first frame is rendered
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      await _runPostFrameAsync();
    });
  }

  bool switchA = false;
  bool switchB = false;

  int? stateLogIDswitchA;
  int? stateLogIDswitchB;

  // In each handleSwitchX, call the dispatchWidgetBuild() method and
  // call _runPostFrameAsync(). This triggers the build log and queues
  // post-frame evaluation in one step.
  Future<void> handleSwitchA(bool value) async {
    setState(() {
      switchA = value;
    });
    // Insert entry into State Log table when switch A changes
    stateLogIDswitchA = await StateManager().dispatchWidgetBuild(
        originWidget: widget.runtimeType.toString(),
        originMethod: 'handleSwitchA',
        stateName: 'switchAvalue',
        stateValue: switchA.toString());
    print("Switch A toggled: $value");

    WidgetsBinding.instance.addPostFrameCallback((_) async {
      await _runPostFrameAsync();
    });
  }

  Future<void> _handleSwitchB(bool value) async {
    setState(() {
      switchB = value;
    });
    // Insert entry into State Log table when switch B changes
    stateLogIDswitchB = await StateManager().dispatchWidgetBuild(
        originWidget: widget.runtimeType.toString(),
        originMethod: 'handleSwitchB',
        stateName: 'switchBvalue',
        stateValue: switchB.toString());
    print("Switch B toggled: $value");
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      await _runPostFrameAsync();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Declarative State')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            SwitchListTile(
              title: const Text('Switch A'),
              onChanged: handleSwitchA,
              value: switchA,
            ),
            SwitchListTile(
              title: const Text('Switch B'),
              onChanged: _handleSwitchB,
              value: switchB,
            ),
            const SizedBox(height: 32),
            BoxWidget(key: boxAkey, label: 'Box A'),
            const SizedBox(height: 16),
            BoxWidget(key: boxBkey, label: 'Box B'),
          ],
        ),
      ),
    );
  }
}

// Minimal placeholder box widget
class BoxWidget extends StatefulWidget {
  final String label;

  const BoxWidget({super.key, required this.label});

  @override
  State<BoxWidget> createState() => BoxWidgetState();
}

class BoxWidgetState extends State<BoxWidget> {
  Color _boxColor = Colors.grey;

  void updateColor(Color color) {
    setState(() {
      _boxColor = color;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 100,
      width: double.infinity,
      color: _boxColor,
      alignment: Alignment.center,
      child: Text(
        widget.label,
        style: const TextStyle(fontSize: 24, color: Colors.white),
      ),
    );
  }
}
// file: dipatch_manager.dart

// import 'package:automath/widgets/feedback_tray_widget.dart';
import 'package:demo/main_declarative.dart';
import 'package:flutter/material.dart';
import 'package:demo/daos/state_manager_dao.dart';

class DispatchManager {
  // Singleton instance
  static final DispatchManager _instance = DispatchManager._internal();
  factory DispatchManager() => _instance;
  DispatchManager._internal();

  // Create fields and methods to register the keys. This enables the
  // central manager to control widget state externally.
  GlobalKey<BoxWidgetState>? boxAKey;
  GlobalKey<BoxWidgetState>? boxBKey;
  void registerBoxAkey(GlobalKey<BoxWidgetState> key) {
    boxAKey = key;
  }

  void registerBoxBkey(GlobalKey<BoxWidgetState> key) {
    boxBKey = key;
  }

  // Create mapping from stateName (user selected) and state value to the
  // desired widget rebuild result. Here I'm mapping the switch value to a
  // desired color based on a Boolean.
  Map<String, void Function(String)> updateCurrentState() {
    return {
      'switchAvalue': (value) {
        final color = value == 'true' ? Colors.blue : Colors.grey;
        boxAKey?.currentState?.updateColor(color);
      },
      'switchBvalue': (value) {
        final color = value == 'true' ? Colors.deepOrangeAccent : Colors.grey;
        boxBKey?.currentState?.updateColor(color);
      },
    };
  }

  // Call widget rebuild using the GlobalKey
  Future<void> updateState(
      {required int stateLogID,
      required String stateName,
      required dynamic stateValue}) async {
    final stateUpdateMap = updateCurrentState();

    // Dispatch widget to build
    stateUpdateMap[stateName]?.call(stateValue.toString());

    // Update the dispatch timestamp
    await StateManagerDao().updateDispatchTimestamp(stateLogID: stateLogID);
  }
}
// file: state_manager.dart
import 'package:demo/daos/state_manager_dao.dart';
import 'dart:async';
import 'package:demo/managers/dispatch_manager.dart';

class StateManager {
  // Singleton instance
  static final StateManager _instance = StateManager._internal();
  factory StateManager() => _instance;
  StateManager._internal();

  Future<int> dispatchWidgetBuild({
    required String originWidget,
    required String originMethod,
    required String stateName,
    required String stateValue,
  }) async {
    final stateLogID = await StateManagerDao().insertStateLogEntry(
        originWidget: originWidget,
        originMethod: originMethod,
        stateName: stateName,
        stateValue: stateValue);

    // Dispatches the state change and updates dispatchTimestamp
    await DispatchManager().updateState(
        stateLogID: stateLogID, stateName: stateName, stateValue: stateValue);

    return stateLogID;
  }

  Future<void> updateWidgetPostFrame(
      {required int stateLogID, required String widgetRebuildResult}) async {
    await StateManagerDao().updateWidgetPostFrame(
        stateLogID: stateLogID, widgetRebuildResult: widgetRebuildResult);
  }
}
// file: main_imperative.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      initialRoute: '/demo',
      routes: {
        '/demo': (context) => ChangeNotifierProvider(
              create: (_) => BoxColorManager(),
              child: const DemoScaffold(),
            ),
      },
    );
  }
}

class BoxColorManager extends ChangeNotifier {
  Color colorA = Colors.grey;
  Color colorB = Colors.grey;

  void updateColorA(bool isOn) {
    colorA = isOn ? Colors.blue : Colors.grey;
    notifyListeners();
  }

  void updateColorB(bool isOn) {
    colorB = isOn ? Colors.deepOrangeAccent : Colors.grey;
    notifyListeners();
  }
}

class DemoScaffold extends StatefulWidget {
  const DemoScaffold({super.key});

  @override
  State<DemoScaffold> createState() => _DemoScaffoldState();
}

class _DemoScaffoldState extends State<DemoScaffold> {
  bool switchA = false;
  bool switchB = false;

  void _handleSwitchA(bool value) {
    setState(() {
      switchA = value;
    });
    context.read<BoxColorManager>().updateColorA(value);
  }

  void _handleSwitchB(bool value) {
    setState(() {
      switchB = value;
    });
    context.read<BoxColorManager>().updateColorB(value);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Imperative State')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            SwitchListTile(
              title: const Text('Switch A'),
              onChanged: _handleSwitchA,
              value: switchA,
            ),
            SwitchListTile(
              title: const Text('Switch B'),
              onChanged: _handleSwitchB,
              value: switchB,
            ),
            const SizedBox(height: 32),
            const BoxWidget(label: 'Box A', isBoxA: true),
            const SizedBox(height: 16),
            const BoxWidget(label: 'Box B', isBoxA: false),
          ],
        ),
      ),
    );
  }
}

class BoxWidget extends StatelessWidget {
  final String label;
  final bool isBoxA;

  const BoxWidget({super.key, required this.label, required this.isBoxA});

  @override
  Widget build(BuildContext context) {
    final color = context.select<BoxColorManager, Color>(
      (manager) => isBoxA ? manager.colorA : manager.colorB,
    );

    return Container(
      height: 100,
      width: double.infinity,
      color: color,
      alignment: Alignment.center,
      child: Text(
        label,
        style: const TextStyle(fontSize: 24, color: Colors.white),
      ),
    );
  }
}
import 'package:sqflite/sqflite.dart';
import 'package:demo/services/database_creation_service.dart';

class DatabaseTableService {
  DatabaseTableService._internal();

  static final DatabaseTableService _instance =
      DatabaseTableService._internal();

  factory DatabaseTableService() => _instance;

  Database? _database;

  Future<void> onCreate(Database db, int version) {
    return _onCreate(db, version);
  }

  Future<void> _onCreate(Database db, int version) async {
    await createStateLogTable(db);
  }

  Future<Database> get database async {
    if (_database != null) return _database!;

    _database = await openDatabase(
      inMemoryDatabasePath,
      version: 1,
      onCreate: DatabaseCreationService().onCreate,
    );

    return _database!;
  }

  Future<void> createStateLogTable(Database db) async {
    await db.execute('''
    CREATE TABLE IF NOT EXISTS state_log (
      stateLogID INTEGER PRIMARY KEY AUTOINCREMENT,
      originWidget TEXT NOT NULL,
      originMethod TEXT NOT NULL,
      stateName TEXT NOT NULL,
      stateValue TEXT NOT NULL,
      originTimestamp INTEGER NOT NULL DEFAULT (strftime('%s', 'now') * 1000),
      dispatchTimestamp INTEGER,
      destinationTimestamp INTEGER,
      widgetRebuildResult TEXT  
    );
    ''');
  }
}
// file: database_creation_serivce.dart

import 'package:sqflite/sqflite.dart';
import 'package:demo/services/database_table_service.dart';

class DatabaseCreationService {
  DatabaseCreationService._internal();

  static final DatabaseCreationService _instance =
      DatabaseCreationService._internal();

  factory DatabaseCreationService() => _instance;

  Future<void> onCreate(Database db, int version) {
    return _onCreate(db, version);
  }

  Future<void> _onCreate(Database db, int version) async {
    await DatabaseTableService().onCreate(db, version);
  }
}
// file: state_manager_dao.dart
import 'package:demo/services/database_table_service.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';

class StateManagerDao {
  // Singleton instance
  static final StateManagerDao _instance = StateManagerDao._internal();
  factory StateManagerDao() => _instance;
  StateManagerDao._internal();

  final DatabaseTableService _dbService = DatabaseTableService();

  // Insert a state log entry
  Future<int> insertStateLogEntry({
    required String originWidget,
    required String originMethod,
    required String stateName,
    required String stateValue,
  }) async {
    final db = await _dbService.database;

    await db.insert(
      'state_log',
      {
        'originWidget': originWidget,
        'originMethod': originMethod,
        'stateName': stateName,
        'stateValue': stateValue,
      },
    );

    // await dumpInMemoryDbToFile();

    final stepLogID = await db.rawQuery('''
      SELECT max(stateLogID) as stepLogID
      FROM state_log;
    ''');

    return stepLogID.first['stepLogID'] as int;
  }

  // Uses the stateChangeTimestamp to update widget build stats & tine stamps
  Future<void> updateWidgetPostFrame(
      {required int stateLogID, required String widgetRebuildResult}) async {
    final db = await _dbService.database;
    int destinationTimestamp = DateTime.now().millisecondsSinceEpoch;

    await db.execute('''
      UPDATE state_log
      SET destinationTimestamp = ?, widgetRebuildResult = ?
      WHERE stateLogID = ?
    ''', [destinationTimestamp, widgetRebuildResult, stateLogID]);

    await dumpInMemoryDbToFile();
  }

  Future<void> updateDispatchTimestamp({required int stateLogID}) async {
    final db = await _dbService.database;
    int dispatchTimestamp = DateTime.now().millisecondsSinceEpoch;
    await db.execute('''
      UPDATE state_log
      SET dispatchTimestamp = ?
      WHERE stateLogID = ?
    ''', [dispatchTimestamp, stateLogID]);

    // await dumpInMemoryDbToFile();
  }

  // Get all rows matching minimum priority
  Future<List<Map<String, Object?>>> getStates() async {
    final db = await _dbService.database;
    final qryState = await db.rawQuery('''
    SELECT stateLogID,
          stateName,
          stateValue
      FROM state_log
    WHERE dispatchTimestamp IS NULL AND 
          originTimestamp = (
                                SELECT min(originTimestamp) as originTimestamp
                                  FROM state_log
                            );
    ''');

    return qryState;
  }

  Future<void> dumpInMemoryDbToFile() async {
    final inMemoryDb = await _dbService.database;
    final filePath = await getSimFilePath();

    final file = File(filePath);
    if (await file.exists()) {
      await file.delete(); // ⬅️ This line forces overwrite
    }

    await inMemoryDb.execute("VACUUM INTO '$filePath'");
    print("Vacuumed");
  }

  Future<String> getSimFilePath() async {
    final dir = await getApplicationDocumentsDirectory();
    return '${dir.path}/state_snapshot.db';
  }
}
